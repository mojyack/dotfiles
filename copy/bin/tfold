#!/bin/bash
cat $0 | tail -n +5 | clang++ -march=native -O3 -x c++ -o $0 - && exec $0 $1
exit 0

#include <string>

auto parse(const char* const v) -> int {
    try {
        return std::stoi(v);
    } catch(const std::exception& e) {
        exit(1);
    }
}

using Char = std::array<char, 4>;

auto calc_utf8_length(const uint8_t first) -> int {
    // const auto lz = std::countl_zero(first);
    // return lz == 0 ? 1 : lz;
    if((first & 0b10000000) == 0) {
        return 1;
    }
    if((first & 0b11110000) == 0b11110000) {
        return 4;
    }
    if((first & 0b11100000) == 0b11100000) {
        return 3;
    }
    if((first & 0b11000000) == 0b11000000) {
        return 2;
    }
    return 1;
}

auto read_char() -> Char {
    const auto first = char(std::getc(stdin));
    auto       c     = Char{first, 0, 0, 0};
    if(first == EOF) {
        return c;
    }
    for(auto i = 1; i < calc_utf8_length(first); i += 1) {
        c[i] = std::getc(stdin);
    }
    return c;
}

auto main(const int argc, const char* const argv[]) -> int {
    if(argc != 2) {
        return 1;
    }
    const auto width = parse(argv[1]);
    auto       count = 0;
loop:
    auto c = read_char();
    if(c[0] == EOF) [[unlikely]] {
        return 0;
    }
    if(c[0] == '\n') {
        count = 0;
        std::putc('\n', stdout);
    } else {
        auto size = 0;
        if(c[0] == '\t') {
            size = 4;
            c    = {' ', ' ', ' ', ' '};
        } else {
            size = c[1] == 0 ? 1 : 2;
        }
        if(count + size > width) {
            std::putc('\n', stdout);
            count = size;
        } else {
            count += size;
        }
        for(const auto s : c) {
            if(s == 0) {
                break;
            }
            std::putc(s, stdout);
        }
    }
    goto loop;
}
